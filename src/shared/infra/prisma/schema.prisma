// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Categories {
    id          String   @id @default(uuid())
    name        String   @unique
    description String
    createdAt   DateTime @default(now()) @db.Timestamp()

    cars Cars[]
}

model Specifications {
    id          String   @id @default(uuid())
    name        String   @unique
    description String
    createdAt   DateTime @default(now()) @db.Timestamp()

    cars SpecificationsCars[]
}

model Users {
    id            String   @id @default(uuid())
    name          String
    password      String
    email         String   @unique
    driverLicense String
    isAdmin       Boolean  @default(false)
    avatar        String?
    createdAt     DateTime @default(now()) @db.Timestamp()

    rentals Rentals[]
    tokens UsersTokens[]
}

model Cars {
    id           String   @id @default(uuid())
    name         String   @unique
    description  String
    dailyRate    Int
    available    Boolean  @default(true)
    licensePlate String   @unique
    fineAmount   Int
    brand        String
    createdAt    DateTime @default(now())
    categoryId   String

    category       Categories           @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    specifications SpecificationsCars[]
    carsImages     CarsImages[]
    rentals        Rentals[]
}

model SpecificationsCars {
    id              String   @id @default(uuid())
    createdAt       DateTime @default(now())
    carId           String
    specificationId String

    car           Cars           @relation(fields: [carId], references: [id])
    specification Specifications @relation(fields: [specificationId], references: [id])
}

model CarsImages {
    id        String   @id @default(uuid())
    carId     String
    imageName String
    createdAt DateTime @default(now()) @db.Timestamp()

    car Cars @relation(fields: [carId], references: [id])
}

model Rentals {
    id                 String    @id @default(uuid())
    carId              String
    userId             String
    startDate          DateTime  @default(now()) @db.Timestamp()
    endDate            DateTime? @db.Timestamp()
    expectedReturnDate DateTime  @db.Timestamp()
    total              Int?
    createdAt          DateTime  @default(now()) @db.Timestamp()
    updatedAt          DateTime  @default(now()) @updatedAt @db.Timestamp()

    car  Cars  @relation(fields: [carId], references: [id])
    user Users @relation(fields: [userId], references: [id])
}

model UsersTokens {
    id String @id @default(uuid())
    refreshToken String @unique
    expiresDate DateTime  @db.Timestamp()
    createdAt DateTime  @default(now()) @db.Timestamp()
    userId String

    user Users @relation(fields: [userId], references: [id])
}